plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.diffplug.spotless" version "5.14.2"
}

spotless {
    java {
        googleJavaFormat().aosp()
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'com.google.firebase:firebase-admin:8.0.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4'

    implementation 'com.h2database:h2:1.4.200'
    implementation 'com.baidu:leansoft-bigqueue:0.7.3'

    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    integrationTestImplementation 'org.awaitility:awaitility:3.0.0'
}

group = 'com.op.ludo'
version = '0.0.1'
description = 'Backend server for LudoOP'
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test